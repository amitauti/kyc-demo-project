/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

rule ParticipantsSeeSelves {
  	description: "Let participants see themselves"
  	participant(p): "org.hyperledger.composer.system.Participant"
  	operation: ALL
    resource(r): "org.hyperledger.composer.system.Participant"
  	condition: (r.getIdentifier() == p.getIdentifier())
  	action: ALLOW
}

rule ParticipantsSeeBanks {
  	description: "Let participants see themselves"
  	participant: "org.hyperledger.composer.system.Participant"
  	operation: READ
    resource: "org.example.kycdemo.Bank"
  	action: ALLOW
}

rule BankEmployeeSeeCustomer {
	  description: "Let BankEmployees see their Customers"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: READ
    resource(r): "org.example.kycdemo.Customer"
  	condition: (r.bank.getIdentifier() == p.bank.getIdentifier())
  	action: ALLOW
}

rule BankEmployeeSeeBankEmployee {
	  description: "Let BankEmployees see their colleagues"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: READ
    resource(r): "org.example.kycdemo.BankEmployee"
  	condition: (r.bank.getIdentifier() == p.bank.getIdentifier())
  	action: ALLOW
}

rule CustomerMakeApplication {
	  description: "All customers can submit an InitialApplication transaction"
  	participant: "org.example.kycdemo.Customer"
  	operation: CREATE
    resource: "org.example.kycdemo.InitialApplication"
  	action: ALLOW
}

rule CustomerMakeKYCRequest {
	  description: "All customers can submit an InitialApplication transaction"
  	participant: "org.example.kycdemo.Customer"
  	operation: CREATE
    resource: "org.example.kycdemo.KYCRequest"
  	action: ALLOW
}

rule CustomerViewKYCRequest {
	  description: "All customers can view request for KYC they are involved with"
    participant: "org.example.kycdemo.Customer"
  	operation: READ
    resource: "org.example.kycdemo.KYCRequest"
    action: ALLOW
}

rule BankEmployeeViewKYCRequest {
	  description: "All bank employees can view request for KYC their bank is involved with"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: READ
    resource(r): "org.example.kycdemo.KYCRequest"
    condition: (p.bank.getIdentifier() === r.issuingBank.getIdentifier())
  	action: ALLOW
}

rule BankEmployeeAddApproval {
	  description: "All bank employee can add their approval to a request for KYC their bank is involved with"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: UPDATE
    resource(r): "org.example.kycdemo.KYCRequest"
  	transaction(t): "org.example.kycdemo.Approve"
    condition: (p.bank.getIdentifier() === r.issuingBank.getIdentifier() || p.bank.getIdentifier() === r.exportingBank.getIdentifier())
  	action: ALLOW
}

rule BankEmployeeSubmitSuggestChanges {
	  description: "All bank employees can submit a SuggestChanges transaction to a request for KYC their bank is involved with"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: CREATE
    resource(r): "org.example.kycdemo.SuggestChanges"
    condition: (p.bank.getIdentifier() === r.loc.issuingBank.getIdentifier() || p.bank.getIdentifier() === r.loc.exportingBank.getIdentifier())
  	action: ALLOW
}

rule CustomerSuggestChanges {
	  description: "All customers can submit a SuggestChanges transaction to a request for KYC they are involved with"
  	participant(p): "org.example.kycdemo.Customer"
  	operation: UPDATE
    resource(r): "org.example.kycdemo.KYCRequest"
  	transaction: "org.example.kycdemo.SuggestChanges"
    condition: (p.getIdentifier() === r.applicant.getIdentifier())
  	action: ALLOW
}

rule BankEmployeeSuggestChanges {
	  description: "All bank employee can add their approval to a request for KYC their bank is involved with"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: UPDATE
    resource(r): "org.example.kycdemo.KYCRequest"
  	transaction(t): "org.example.kycdemo.SuggestChanges"
    condition: (p.bank.getIdentifier() === r.issuingBank.getIdentifier() || p.bank.getIdentifier() === r.exportingBank.getIdentifier())
  	action: ALLOW
}

rule CustomerAddChanges {
	  description: "All customers can update a KYCRequest with their suggested rules if they are involved in it"
  	participant(p): "org.example.kycdemo.Customer"
  	operation: UPDATE
    resource(r): "org.example.kycdemo.KYCRequest"
  	transaction(t): "org.example.kycdemo.SuggestChanges"
    condition: (p.getIdentifier() === r.applicant.getIdentifier() || p.getIdentifier() === r.beneficiary.getIdentifier())
  	action: ALLOW
}

rule BankEmployeeAddChanges {
	  description: "All bank employees can update a KYCRequest with their suggested rules if their bank is involved in it"
  	participant(p): "org.example.kycdemo.Customer"
  	operation: UPDATE
    resource(r): "org.example.kycdemo.KYCRequest"
  	transaction(t): "org.example.kycdemo.SuggestChanges"
    condition: (p.bank.getIdentifier() === r.issuingBank.getIdentifier() || p.bank.getIdentifier() === r.exportingBank.getIdentifier())
  	action: ALLOW
}

rule BankEmployeeRejectApplication {
	  description: "All bank employees can submit a Reject transaction for an LoC their bank is involved with"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: CREATE
    resource(r): "org.example.kycdemo.Reject"
    condition: (p.bank.getIdentifier() === r.loc.issuingBank.getIdentifier() || p.bank.getIdentifier() === r.loc.exportingBank.getIdentifier())
  	action: ALLOW
}

rule BankEmployeeMarksAsRejected {
	  description: "All bank employees can update a KYCRequest their bank is involved with with a REJECTED status"
  	participant(p): "org.example.kycdemo.BankEmployee"
  	operation: UPDATE
    resource(r): "org.example.kycdemo.KYCRequest"
  	transaction(t): "org.example.kycdemo.Reject"
    condition: (p.bank.getIdentifier() === r.issuingBank.getIdentifier() || p.bank.getIdentifier() === r.exportingBank.getIdentifier())
  	action: ALLOW
}

rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule System {
    description: "Grant all full access to system resources"
    participant: "org.**"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}